# Application Properties Configuration
# Description: Config file for book service 
# Author: Shola suleiman
# Date: 29.11.2033

greeting  = HELLO (from application.properties) !!...
salutation = ${greeting} HELLO !!!
message=Big welcome to ALL students
loudhello: ${greeting}  wooooooooooooooooooooooooooow

server.port: 7777

# Eureka client Configuration
# Indicates whether this client should register itself with Eurek
eureka.client.registerWithEureka = true
# Prefer IP address over hostname during Eureka registration
# This is important in containerized environments like Docker where hostnames might be dynamic and not resolvable..[I do need deeper understanding]
eureka.instance.preferIpAddress = false
# Fetches the registry information from Eureka server to find other services
eureka.client.fetchRegistry = true
# Specifies the URL of the Eureka server for service registration and discovery
# Multiple URLs can be provided, separated by commas
# Content replication between instances ensures all instances have consistent registry data
# not using localhost in order to conform to the setting of my docker-compose file
eureka.client.serviceUrl.defaultZone=http://eurekaserver:9092/eureka

# Actuator Configuration
# Exposes all actuator endpoints. Actuator endpoints provide management and monitoring capabilities
management.endpoints.web.exposure.include=*

# Data Source Configurations
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.dbpc2.initial-size=0
spring.datasource.dbpc2.max-idle=5
spring.datasource.dbpc2.min-idle=2
spring.datasource.dbpc2.max-total=8

spring.jackson.date-format=dd-MM-yyyy
spring.jackson.serialization.write-dates-as-timestamps=false

# Client Registration for Keycloak
spring.security.oauth2.client.registration.keycloak.client-id=EduAppWebApplication
#spring.security.oauth2.client.registration.keycloak.client-secret=ZYrnNlk5O0QC76wR9ra6ZMhOWUBWRaZG
spring.security.oauth2.client.registration.keycloak.client-secret=tOWRsnwaFxgWybotkHturqe2bxSCeK4V
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid

# Provider Details for Keycloak
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://keycloak:8080/auth/realms/EduApp
spring.security.oauth2.client.provider.keycloak.authorization-uri=http://keycloak:8080/auth/realms/EduApp/protocol/openid-connect/auth
spring.security.oauth2.client.provider.keycloak.token-uri=http://keycloak:8080/auth/realms/EduApp/protocol/openid-connect/token
spring.security.oauth2.client.provider.keycloak.user-info-uri=http://keycloak:8080/auth/realms/EduApp/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=http://keycloak:8080/auth/realms/EduApp/protocol/openid-connect/certs
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

# Resource Server JWT Configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/auth/realms/EduApp
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8180/auth/realms/EduApp

# Zipkin Config
spring.zipkin.baseUrl:http://zipkin:9411
# how much infromation sleuth should send to zipkin...1==100% since my microservice logs are small
spring.sleuth.sampler.percentage: 1

